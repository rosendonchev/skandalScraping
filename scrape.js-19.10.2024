const fs = require('fs');
const { exec } = require('child_process');
const puppeteer = require('puppeteer');

// Mapping of URL IDs to specific channel names required for the EPG
const channelNameMapping = {
    "bnt-1-hd-online": "BNT1",
    "bnt-2-online": "BNT2",
    "bnt-3-hd-online": "BNT3",
    "bnt-4-online": "BNT4",
    "nova-tv-hd-online": "Nova",
    "btv-hd-online": "bTV",
    "btv-action-hd-online": "bTVAction",
    "btv-cinema-online": "bTVCinema",
    "btv-comedy-online": "bTVComedy",
    "btv-story-online": "bTVStory",
    "bulgaria-on-air-online": "BulgariaOnAir",
    "cartoon-network-online": "CartoonNetwork",
    "city-tv-online": "City",
    "code-fashion-tv-hd-online": "CodeFashion",
    "diema-family-online": "DiemaFamily",
    "diema-sport-hd-online": "DiemaSport",
    "diema-sport-2-hd-online": "DiemaSport2",
    "diema-sport-3-hd-online": "DiemaSport3",
    "diema-online": "Diema",
    "disney-channel-online": "Disney",
    "discovery-channel-hd-online": "Discovery",
    "dstv-online": "DSTV",
    "e-kids-online": "EKids",
    "epic-drama-hd-online": "EpicDrama",
    "eurosport-1-hd-online": "Eurosport1",
    "eurosport-2-hd-online": "Eurosport2",
    "euronews-bulgaria-online": "EuroNews",
    "evrokom-online": "Eurocom",
    "folklor-tv-online": "FolklorTV",
    "food-network-hd-online": "FoodNetwork",
    "star-crime-hd-online": "STARCrime",
    "star-channel-hd-online": "STARChannel",
    "star-life-hd-online": "STARLife",
    "id-xtra-hd-online": "ID",
    "kanal-3-online": "Kanal3",
    "kino-nova-online": "KinoNova",
    "max-sport-1-hd-online": "MAXSport1",
    "max-sport-2-hd-online": "MAXSport2",
    "max-sport-3-hd-online": "MAXSport3",
    "max-sport-4-hd-online": "MAXSport4",
    "nat-geo-hd-online": "NatGeo",
    "nat-geo-wild-hd-online": "NatGeoWild",
    "nick-jr-online": "NickJr",
    "nickelodeon-online": "Nickelodeon",
    "nicktoons-online": "Nicktoons",
    "nova-news-hd-online": "NovaNews",
    "nova-sport-hd-online": "NovaSport",
    "planeta-folk-online": "PlanetaFolk",
    "planeta-hd-online": "Planeta",
    "ring-bg-hd-online": "RING",
    "rodina-tv-online": "Rodina",
    "78-tv-hd-online": "78TV",
    "skat-online": "Skat",
    "the-voice-online": "TheVoice",
    "tiankov-tv-online": "TiankovFolk",
    "tlc-online": "TLC",
    "travel-channel-hd-online": "TravelChannel",
    "travel-tv-online": "Travel",
    "tv-1-online": "TV1",
    "vtk-online": "VTK",
    "24-kitchen-hd-online": "24kitchen",
    "alfa-tv-online": "Alfa",
    "axn-online": "AXN",
    "axn-black-online": "AXNBlack",
    "axn-white-online": "AXNWhite",
    "bloomberg-tv-online": "Bloomberg",
    // Add more mappings as needed
};

// Set to store recorded channels and avoid duplicates
const recordedChannels = new Set();

async function scrapeAndPushToGit() {
    // Clear the sources.m3u file before writing new data
    fs.writeFileSync('sources.m3u', '', 'utf-8');
    fs.appendFileSync('sources.m3u', "#EXTM3U\n", 'utf-8');
    recordedChannels.clear();
    
    // Launch a new browser instance with --no-sandbox flag
    const browser = await puppeteer.launch({
        args: ['--no-sandbox', '--disable-setuid-sandbox']
    });
    const page = await browser.newPage();

    // Replace this URL with the URL of the page containing the links you want to scrape
    const url = 'https://seirsanduk.online/bnt-1-hd-online';
    
    await page.goto(url, { waitUntil: 'networkidle2' });

    // Extract all links from the page
    const links = await page.evaluate(() => {
        return Array.from(document.querySelectorAll('a'))
                    .map(link => link.href)
                    .filter(href => href); // Filter out empty hrefs
    });

    for (let link of links) {
        try {
            await page.goto(link, { waitUntil: 'networkidle2' });

            const playerSource = await page.evaluate(() => {
                const scriptTags = document.querySelectorAll('script');
                let source = null;
                
                scriptTags.forEach(script => {
                    const scriptContent = script.innerHTML;
                    if (scriptContent.includes('VideoElement").')) {
                        const match = scriptContent.match(/file:\s*"([^"]+)"/);
                        if (match) {
                            source = match[1];
                        }
                    }
                });

                return source;
            });

            if (playerSource) {
                if (playerSource != "https://www.seir-sanduk.com/otustanausta1.mp4") {
                    // Extract the channel name from the URL (if it's part of the URL)
                    const channelId = link.split('online/')[1]?.split(' ')[0] || 'Unknown Channel';

                    // Check the mapping for the correct channel name
                    const channelName = channelNameMapping[channelId] || channelId;
                    
                    // Skip "Unknown Channel" and duplicates
                    if (channelName !== 'Unknown Channel' && channelName !== 'index.php' && channelName !== 'bnt-1-hd-online#' && !recordedChannels.has(channelName)) {
                        const data = `#EXTINF:-1,${channelName}\n${playerSource}\n`;

                        fs.appendFileSync('sources.m3u', data, 'utf-8');
                        
                        console.log(`Data successfully written for ${channelName}`);
                        recordedChannels.add(channelName);  // Add to the set of recorded channels
                    } else if (channelName === 'Unknown Channel') {
                        console.log(`Skipped: ${channelName}`);
                    } else {
                        console.log(`Skipped duplicate channel: ${channelName}`);
                    }
                }
            } else {
                console.log(`player.source not found for ${link}`);
            }
        } catch (error) {
            console.error(`Error visiting ${link}: ${error.message}`);
        }
    }

    // Close the browser instance
    await browser.close();

    // Execute Git commands to add, commit, and push the changes
    exec('git add sources.m3u', (err, stdout, stderr) => {
        if (err) {
            console.error(`Error adding file: ${stderr}`);
            return;
        }

        exec('git commit -m "Update sources.m3u with new player sources"', (err, stdout, stderr) => {
            if (err) {
                console.error(`Error committing file: ${stderr}`);
                return;
            }

            exec('git push', (err, stdout, stderr) => {
                if (err) {
                    console.error(`Error pushing to repository: ${stderr}`);
                    return;
                }

                console.log('Changes successfully pushed to GitHub repository');
            });
        });
    });
}

// Export the function to be used in the server
module.exports = scrapeAndPushToGit;
